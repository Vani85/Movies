// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieBookingAPI.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieBookingAPI.Migrations
{
    [DbContext(typeof(MovieBookingDbContext))]
    [Migration("20250521102754_TheatreAndShows")]
    partial class TheatreAndShows
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("SeatId")
                        .HasColumnType("integer");

                    b.Property<int>("ShowId")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookingId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Movies", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationInMins")
                        .HasColumnType("integer");

                    b.Property<bool>("IsNowShowing")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MovieImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Show", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShowId"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ShowDate")
                        .HasColumnType("date");

                    b.Property<string>("ShowTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TheatreId")
                        .HasColumnType("integer");

                    b.HasKey("ShowId");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheatreId");

                    b.ToTable("Show");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Theatre", b =>
                {
                    b.Property<int>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TheatreId"));

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<string>("TheatreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TheatreId");

                    b.ToTable("Theatre");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.TheatreSeats", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeatId"));

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<int>("CostInPounds")
                        .HasColumnType("integer");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TheatreId")
                        .HasColumnType("integer");

                    b.HasKey("SeatId");

                    b.HasIndex("TheatreId");

                    b.ToTable("TheatreSeats");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Booking", b =>
                {
                    b.HasOne("MovieBookingAPI.Models.DatabaseModels.TheatreSeats", "seats")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieBookingAPI.Models.DatabaseModels.Show", "show")
                        .WithMany()
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seats");

                    b.Navigation("show");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.Show", b =>
                {
                    b.HasOne("MovieBookingAPI.Models.DatabaseModels.Movies", "movies")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieBookingAPI.Models.DatabaseModels.Theatre", "theatre")
                        .WithMany()
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movies");

                    b.Navigation("theatre");
                });

            modelBuilder.Entity("MovieBookingAPI.Models.DatabaseModels.TheatreSeats", b =>
                {
                    b.HasOne("MovieBookingAPI.Models.DatabaseModels.Theatre", "theatre")
                        .WithMany()
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("theatre");
                });
#pragma warning restore 612, 618
        }
    }
}
